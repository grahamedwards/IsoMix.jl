var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = IsoMix","category":"page"},{"location":"#IsoMix","page":"Home","title":"IsoMix","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for IsoMix.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [IsoMix]","category":"page"},{"location":"#IsoMix.Component","page":"Home","title":"IsoMix.Component","text":"Component <: IsoMixType\n\nAbstract supertype for Component_ instances, where the _ indicates dimensionality. Represents the composition of a component or endmember within a natural system. \n\nsee also: Component1, Component2, Component3\n\n\n\nComponent(x, Cx) -> Component1\n\nComponent(x, Cx, y, Cy) -> Component2\n\nComponent(x, Cx, y, Cy, z, Cz) -> Component3\n\nThe constructor function accepts values as a list of arguments or as keyword assignments, e.g.: Component(x=1, Cx=2)\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Component1","page":"Home","title":"IsoMix.Component1","text":"Component1 <: Component\n\n1-dimensional Component instance.\n\nFields \nx Isotopic composition of x\nCx Concentration of x\n\nsee also: Component\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Component2","page":"Home","title":"IsoMix.Component2","text":"Component2 <: Component\n\n2-dimensional Component instance.\n\nFields \nx Isotopic composition of x\nCx Concentration of x\ny Isotopic composition of y\nCy Concentration of y\n\nsee also: Component\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Component3","page":"Home","title":"IsoMix.Component3","text":"Component3 <: Component\n\n3-dimensional Component instance.\n\nFields \nx Isotopic composition of x\nCx Concentration of x\ny Isotopic composition of y\nCy Concentration of y\nz Isotopic composition of z\nCz Concentration of z\n\nsee also: Component\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Constant","page":"Home","title":"IsoMix.Constant","text":"Constant(x) <: Datum\n\nA Datum instance with a discrete value x.\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Data","page":"Home","title":"IsoMix.Data","text":"Data <: IsoMixType\n\nAbstract supertype for Data_ instances, where the _ indicates dimensionality.\n\nsee also: Data1, Data2, Data3\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Data1","page":"Home","title":"IsoMix.Data1","text":"Data1 <: Data\n\n1-dimensional Data instance.\n\nFields \nx Isotopic composition of x\nCx Concentration of x\n\nsee also: Datum\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Data2","page":"Home","title":"IsoMix.Data2","text":"Data2 <: Data\n\n2-dimensional Data instance.\n\nFields \nx Isotopic composition of x\nCx Concentration of x\ny Isotopic composition of y\nCy Concentration of y\n\nsee also: Datum\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Data3","page":"Home","title":"IsoMix.Data3","text":"Data3 <: Data\n\n3-dimensional Data instance.\n\nFields \nx Isotopic composition of x\nCx Concentration of x\ny Isotopic composition of y\nCy Concentration of y\nz Isotopic composition of z\nCz Concentration of z\n\nsee also: Datum\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Datum","page":"Home","title":"IsoMix.Datum","text":"Datum <: IsoMixType\n\nAbstract supertype for Datum instances.\n\nsee also: Constant, Unf, Norm, logNorm\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Fraction","page":"Home","title":"IsoMix.Fraction","text":"Fraction <: IsoMixType\n\nAbstract supertype for Fraction_ instances that contain vectors of fractional combinations of _ components/endmembers.\n\nsee also: Fraction2, Fraction3\n\n\n\nFraction(Amin, Amax; n=101)\n\nReturns a Fraction2 with n linearly spaced fractional combinations of components A and B that each sum to 1, given minimum and maximum A fractions of Amin and Amax, respectively. Sincen gives the linear fractions of each component, this constructor returns n-length vectors of each component. Both Amin and Amax must fall within [0,1].\n\nExample\n\njulia> Fraction(0,1,n=3)\nFraction2([0.0, 0.5, 1.0], [1.0, 0.5, 0.0], 3)\n\n\n\nFraction(Amin, Amax, Bmin, Bmax; n=101)\n\nReturns a Fraction3 with linearly spaced fractional combinations of components A, B, and C that each sum to 1, given respective minima and maxima of A (Amin and Amax) and B (Bmin and Bmax). Since n gives the linear fractions of each component, this constructor returns a n(n÷2+1)-length vector for each component. Amin,Amax, Bmin, and Bmax must fall within [0,1].\n\nExample\n\njulia> f=Fraction(0,1,0,1,n=3)\nFraction3([0.0, 0.0, 0.0, 0.5, 0.5, 1.0], [0.0, 0.5, 1.0, 0.0, 0.5, 0.0], [1.0, 0.5, 0.0, 0.5, 0.0, 0.0], 6)\n\n\n\nFraction(D, n=101)\n\nGiven a provided number of components D (2 or 3), returns a corresponding Fraction instance with component concentrations of 0 to 1. \n\nExample\n\njulia> Fraction(2,n=3)\nFraction2([0.0, 0.5, 1.0], [1.0, 0.5, 0.0], 3)\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Fraction2","page":"Home","title":"IsoMix.Fraction2","text":"Fraction2 <: Fraction\n\n2-dimensional Fraction instance.\n\nFields \nA Endmember/component A\nB Endmember/component B\n\nsee also: Fraction\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Fraction3","page":"Home","title":"IsoMix.Fraction3","text":"Fraction3 <: Fraction\n\n3-dimensional Fraction instance.\n\nFields \nA Endmember/component A\nB Endmember/component B\nC Endmember/component C\n\nsee also: Fraction\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.IsoMixType","page":"Home","title":"IsoMix.IsoMixType","text":"IsoMixType\n\nSupertype containing all custom types and structs in the IsoMix package:\n\nIsoMixType\n\n├─ Component\n\n│  ├─ Component1\n\n│  ├─ Component2\n\n│  └─ Component3\n\n├─ Data\n\n│  ├─ Data1\n\n│  ├─ Data2\n\n│  └─ Data3\n\n├─ Datum\n\n│  ├─ Constant\n\n│  ├─ Norm\n\n│  ├─ Unf\n\n│  └─ logNorm\n\n├─ Fraction\n\n│  ├─ Fraction2\n\n│  └─ Fraction3\n\n├─ Model\n\n│  ├─ Model1\n\n│  ├─ Model2\n\n│  └─ Model3\n\n├─ Prior\n\n│  ├─ Prior2\n\n│  └─ Prior3\n\n└─ System\n\n├─ System2\n\n└─ System3\n\nExample\n\njulia> using AbstractTrees,IsoMix; AbstractTrees.children(d) = subtypes(d); print_tree(IsoMixType)\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Model","page":"Home","title":"IsoMix.Model","text":"Model <: IsoMixType\n\nAbstract supertype for Model_ instances, where the _ indicates dimensionality.\n\nsee also: Model1, Model2, Model3\n\n\n\nModel(f::Fraction, s::System)\n\nGenerate a Model instance \n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Model1","page":"Home","title":"IsoMix.Model1","text":"Model1 <: Model\n\n1-dimensional Model instance: a single species tracking isotopic composition and concentration.\n\nFields \nx Isotopic composition of x\nCx Concentration of x\n\nsee also: Model\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Model2","page":"Home","title":"IsoMix.Model2","text":"Model2 <: Model\n\n2-dimensional Model instance: two species tracking isotopic composition.\n\nFields \nx Isotopic composition of x\ny Isotopic composition of y\n\nsee also: Model\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Model3","page":"Home","title":"IsoMix.Model3","text":"Model3 <: Model\n\n3-dimensional Model instance: three species tracking isotopic composition.\n\nFields \nx Isotopic composition of x\ny Isotopic composition of y\nz Isotopic composition of z\n\nsee also: Model\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Norm","page":"Home","title":"IsoMix.Norm","text":"Norm(m, s) <: Datum\n\nNormally distributed Datum with mean m and standard deviation s.\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Prior","page":"Home","title":"IsoMix.Prior","text":"Prior <: IsoMixType\n\nAbstract supertype for Prior_ instances, where the _ indicates dimensionality. Represents a suite of data that provide a prior estimate for the endmember compositions of a natural system.\n\nsee also: Prior2, Prior3\n\n\n\nPrior(A::Data, B::Data)\n\nReturns a Prior2\n\nPrior(A::Data, B::Data, C::Data)\n\nReturns a Prior3\n\nNote: each Data must be of the same subtype (i.e. consistent number of components within each endmember of a system).\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Prior2","page":"Home","title":"IsoMix.Prior2","text":"Prior2 <: Prior\n\n2-dimensional Prior instance.\n\nFields \nA Endmember/component A\nB Endmember/component B\n\nsee also: Prior\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Prior3","page":"Home","title":"IsoMix.Prior3","text":"Prior3 <: Prior\n\n3-dimensional Prior instance.\n\nFields \nA Endmember/component A\nB Endmember/component B\nC Endmember/component C\n\nsee also: Prior\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.System","page":"Home","title":"IsoMix.System","text":"Prior <: IsoMixType\n\nAbstract supertype for System_ instances, where the _ indicates dimensionality. Represents a model system composition charaterized its Component fields.\n\nsee also: Prior2, Prior3\n\n\n\nThe constructor function accepts values as a list of arguments:\n\nSystem(A::Component, B::Component)\n\nReturns a System2\n\nSystem(A::Component, B::Component, C::Component)\n\nReturns a System3\n\n... or as keyword assignments, e.g.:      System(A=..., B=...)\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.System2","page":"Home","title":"IsoMix.System2","text":"System2 <: System\n\n2-dimensional System instance.\n\nFields \nA Endmember/component A\nB Endmember/component B\n\nsee also: System\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.System3","page":"Home","title":"IsoMix.System3","text":"System3 <: System\n\n3-dimensional System instance.\n\nFields \nA Endmember/component A\nB Endmember/component B\nC Endmember/component C\n\nsee also: System\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.Unf","page":"Home","title":"IsoMix.Unf","text":"Unf(a, b) <: Datum\n\nUniformly distributed Datum with minimum a and maximum b, inclusive. I.e., for any x in Unf(a b), x in ab.\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.logNorm","page":"Home","title":"IsoMix.logNorm","text":"logNorm(lm, ls) <: Datum\n\nLog-normally distributed Datum with log-mean lm and log-space standard deviation ls.\n\n\n\n\n\n","category":"type"},{"location":"#IsoMix.countcomponents-Tuple{C} where C<:Component","page":"Home","title":"IsoMix.countcomponents","text":"IsoMix.countcomponents(c::Component)\n\nCount the number of elemental dimensions (1-3) of c.\n\nExample\n\njulia> IsoMix.countcomponents(Component(1,2,3,4,5,6))\n3\n\n\n\n\n\n","category":"method"},{"location":"#IsoMix.mix!-Tuple{Model1, System2, Fraction2}","page":"Home","title":"IsoMix.mix!","text":"mix!(m <: Model, s <: System, f <: Fraction)\n\nIn-place version of mix that overwrites fields in m.\n\n\n\n\n\n","category":"method"},{"location":"#IsoMix.mix-Tuple{System, Fraction}","page":"Home","title":"IsoMix.mix","text":"mix(s<:System, f<:Fraction)\n\n\n\n\n\n","category":"method"}]
}
